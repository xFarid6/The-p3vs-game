from kivy.lang import Builder                       # LOOKUP FOR KIVY PRE_INSTALLED ICONS
from kivy.properties import StringProperty
from kivy.uix.screenmanager import Screen

from kivymd.icon_definitions import md_icons
from kivymd.app import MDApp
from kivymd.uix.list import OneLineIconListItem


Builder.load_string(
    '''
#:import images_path kivymd.images_path


<CustomOneLineIconListItem>

    IconLeftWidget:
        icon: root.icon


<PreviousMDIcons>

    MDBoxLayout:
        orientation: 'vertical'
        spacing: dp(10)
        padding: dp(20)

        MDBoxLayout:
            adaptive_height: True

            MDIconButton:
                icon: 'magnify'

            MDTextField:
                id: search_field
                hint_text: 'Search icon'
                on_text: root.set_list_md_icons(self.text, True)

        RecycleView:
            id: rv
            key_viewclass: 'viewclass'
            key_size: 'height'

            RecycleBoxLayout:
                padding: dp(10)
                default_size: None, dp(48)
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
'''
)


class CustomOneLineIconListItem(OneLineIconListItem):
    icon = StringProperty()


class PreviousMDIcons(Screen):

    def set_list_md_icons(self, text="", search=False):
        '''Builds a list of icons for the screen MDIcons.'''

        def add_icon_item(name_icon):
            self.ids.rv.data.append(
                {
                    "viewclass": "CustomOneLineIconListItem",
                    "icon": name_icon,
                    "text": name_icon,
                    "callback": lambda x: x,
                }
            )

        self.ids.rv.data = []
        for name_icon in md_icons.keys():
            if search:
                if text in name_icon:
                    add_icon_item(name_icon)
            else:
                add_icon_item(name_icon)


class MainApp(MDApp):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.screen = PreviousMDIcons()

    def build(self):
        return self.screen

    def on_start(self):
        self.screen.set_list_md_icons()


MainApp().run()

**************************************************************************+

KV = """        # stringa multiriga per Builder
Screen: # widget root

    ScreenManager:

        Screen:

            BoxLayout:
                orientation:"vertical"

                MDToolbar:
                    title: "Navigation Drawer"
                    elevation: 10
                    left_action_items: [['menu', lambda x: nav_drawer.set_state()]]

                GridLayout:
                    rows: 4

                MDTextField:
                    id: mdtext
                    hint_text: "Cosa stai cercando?"
                    mode: "rectangle"

                MDRaisedButton:
                    text: "AVVIA RICERCA"
                    size_hint_x: 1
                    size_hint_y: 0.1
                    on_press: app.normal_search_button()

                ScrollView:
                    MDLabel:
                        id: mdlab
                        text: "Benvenuti su Wikipedia Reader"
                        size_hint_y: None
                        height: self.texture_size[1]
                        text_size: self.width, None

                MDRaisedButton:
                    text: "CERCA ARTICOLO CASUALE"
                    size_hint_x: 1
                    size_hint_y: 0.1
                    on_press: app.random_search_button()

    MDNavigationDrawer:
        id: nav_drawer

    GridLayout: # un tipo di layout
        rows: 2

        ScrollView:
            MDLabel: # widget al primo ripiano
                id: mdlab
                text: "Benvenuti a Socrates!"
                # font_style: "H3"
                # padding_x: "30"
                size_hint_y: None
                height: self.texture_size[1]
                text_size: self.width, None

        MDRaisedButton: # widget al secondo piano
            id: mdbu
            text: "Cerca articolo casuale"
            size_hint_x: "0.5" # 0.0 to 1, larghezza bottone
            on_press: app.random_search_button()

    MDRectangleFlatButton:
        text: "Hello Kivy World!"
        pos_hint: {"center_x": 0.5, "center_y": 0.5}
"""

    def random_search_button(self):
        endpoint = "https://it.wikipedia.org/w/api.php?action=query&list=random&rnlimit=1&rnnamespace=0&format=json"
        # cerca una voce diversa a ogni chiamata
        self.root.ids["mdlab"].text = "Caricamento in corso..."
        self.rs_request = UrlRequest(endpoint,
                                     on_success=self.get_data,
                                     ca_file=certifi.where())
        print(self.root.ids)

    def get_data(self, request, response):
        print(response)
        random_article = response["query"]["random"][0]
        random_tite = random_article["title"]
        self.root.ids["mdlab"].text = random_tite
        endpoint = f"https://it.wikipedia.org/w/api.php?prop=extract&explaintext&exintro&format=json&action=query&titles={random_tite.replace(' ', '%20')}"
        self.data_request = UrlRequest(endpoint,
                                       on_success=self.set_textarea,
                                       ca_file=certifi.where())

    def set_textarea(self, request, response):
        page_info = response["query"]["pages"]
        page_id = next(iter(page_info))
        page_title = page_info[page_id]["title"]
        page_extract = page_info[page_id]["extract"]
        print(page_extract, page_title)
        self.root.ids["mdlab"].text = f"{page_title}\n\n{page_extract}"


